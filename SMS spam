> library(readr)
> sms_spam <- read_csv("~/sms_spam.csv")
> View(sms_spam)
> sms_raw<-sms_spam
> str(sms_raw)
> sms_raw$type<-factor(sms_raw$type)
> str(sms_raw$type)
> table(sms_raw$type)
> library("tm", lib.loc="~/R/win-library/3.3")
> sms_corpus<-VCorpus(VectorSource(sms_raw$text))
> print(sms_corpus)
> as.character(sms_corpus[[1]])
> lapply(sms_corpus[1:2], as.character)
> sms_corpus_clean<-tm_map(sms_corpus,content_transformer(tolower))
> sms_corpus_clean<-tm_map(sms_corpus_clean,removePunctuation)
> sms_corpus_clean<-tm_map(sms_corpus_clean,removeNumbers)
> as.character(sms_corpus[[1]])
> as.character(sms_corpus_clean[[1]])
> sms_corpus_clean<-tm_map(sms_corpus_clean,removeWords, stopwords())
> install.packages("SnowballC")
> library("SnowballC", lib.loc="~/R/win-library/3.3")
> sms_corpus_clean<-tm_map(sms_corpus_clean,stemDocument)
> as.character(sms_corpus_clean[[1]])
> sms_corpus_clean<-tm_map(sms_corpus_clean,stripWhitespace)
> as.character(sms_corpus_clean[[1]])
> sms_dtm<-DocumentTermMatrix(sms_corpus_clean)
> sms_dtm
> sms_dtm_train<-sms_dtm[1:4200, ]
> sms_dtm_test<-sms_dtm[4201:5574, ]
> sms_train_labels<-sms_raw[1:4200, ]$type
> sms_test_labels<-sms_raw[4201:5574, ]$type
> prop.table(table(sms_train_labels))
> prop.table(table(sms_test_labels))
> install.packages("wordcloud")
> library("wordcloud", lib.loc="~/R/win-library/3.3")
> wordcloud(sms_corpus_clean,min.freq = 50, random.order = FALSE)
> spam<-subset(sms_raw, type == "spam")
> ham<-subset(sms_raw, type == "ham")
> wordcloud(spam$text,max.words = 40, scale = c(3,0.5))
> wordcloud(ham$text,max.words = 40, scale = c(3,0.5))
> findFreqTerms(sms_dtm_train,5)
> sms_freq_words<-findFreqTerms(sms_dtm_train,5)
> sms_freq_words<-findFreqTerms(sms_dtm_train,5)
> str(sms_freq_words)
> sms_dtm_freq_train<-sms_dtm_train[ , sms_freq_words]
> sms_dtm_freq_test<-sms_dtm_test[ , sms_freq_words]
> convert_counts<-function(x) {}
> convert_counts<-function(x) {
+ x<-ifelse(x>0, "yes", "no")
+ }
> sms_train<-apply(sms_dtm_freq_train, MARGIN = 2, convert_counts)
> sms_test<-apply(sms_dtm_freq_test, MARGIN = 2, convert_counts)
> library("e1071", lib.loc="~/R/win-library/3.3")
> sms_classifier<-naiveBayes(sms_train,sms_train_labels)
> library("gmodels", lib.loc="~/R/win-library/3.3")
> sms_test_pred<-predict(sms_classifier,sms_test)
> CrossTable(sms_test_pred,sms_test_labels, prop.chisq = FALSE, prop.t= FALSE, dnn= c('prediced','actuals'))
> sms_classifier2<-naiveBayes(sms_train,sms_train_labels, laplace = 1)
> sms_test_pred2<-predict(sms_classifier,sms_test)
> CrossTable(sms_test_pred,sms_test_labels, prop.chisq = FALSE, prop.t= FALSE, dnn= c('prediced','actuals'))

 
